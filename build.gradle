group "com.myjetwallet.matchingengine"
version "2.0"

buildscript {
    ext.spring_boot_version = "2.0.6.RELEASE"
    ext.kotlin_version = "1.5.21"
    ext.protobuf_gradle_plugin = "0.8.17"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_gradle_plugin"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}

apply plugin: "idea"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "application"
apply plugin: "com.google.protobuf"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

ext {
    protobuf_version = "3.17.3"
    azure_storage_version = "8.6.6"
    gson_version = "2.8.7"
    module_kotlin_jackson_version = "2.12.4"
    http_client_version = "4.5.13"
    fst_version = "2.56"
    jedis_version = "3.3.0"
    big_math_version = "2.3.0"
    springfox_swagger2 = "3.0.0"
    springfox_swagger_ui = "3.0.0"
    junit_version = "4.13"
    mockito_kotlin_version = "1.6.0"
    grpcVersion = "1.39.0"
    log4j_version = "1.2.17"
    logstash_version = "1.14.1"
    kotlin_coroutines = "1.5.1"
}

dependencies {
    // external libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "log4j:log4j:$log4j_version"
    implementation "biz.paluch.logging:logstash-gelf:$logstash_version"
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.microsoft.azure:azure-storage:$azure_storage_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$module_kotlin_jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$module_kotlin_jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$module_kotlin_jackson_version"
    implementation "org.apache.httpcomponents:httpclient:$http_client_version"
    implementation "de.ruedigermoeller:fst:$fst_version"
    implementation "redis.clients:jedis:$jedis_version"
    implementation "ch.obermuhlner:big-math:$big_math_version"

    implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation "io.springfox:springfox-swagger2:$springfox_swagger2"
    implementation "io.springfox:springfox-swagger-ui:$springfox_swagger_ui"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/grpc", "src/main/java", "src/main/kotlin"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

compileKotlin {
    dependsOn ":generateProto"
    kotlinOptions {
        apiVersion = "1.4"
        jvmTarget = "1.8"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }

    generateProtoTasks.generatedFilesBaseDir = "src"

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

ext.revision = 'git rev-list --count HEAD'.execute().text.trim()
ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
ext.buildVersion = "${revision}.${hash}"
ext.buildNumber = System.getenv('BuildNumber')

bootJar {
    manifest {
        attributes "Revision-number": revision, "BuildVersion": buildNumber, "Version": version
    }
}

task printProperties doLast {
    println "Revision-number": revision, "BuildVersion": buildNumber, "Version": version
}

bootDistZip {
    archiveFileName = "${project.name}-${project.version}.zip"
    into("${project.name}-${project.version}.zip") {
        from "${rootProject.projectDir}/src/dist"
    }
}

task versionTxt() {
    doLast {
        new File("${projectDir}/docker", "version.txt").text = "$version.${readVersionCode()}"
    }
}

mainClassName = "com.lykke.matching.engine.AppStarterKt"
applicationDefaultJvmArgs = ["-Xms512m", "-Xmx1g"]
distTar.enabled = false